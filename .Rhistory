}
minmoeas = bind_rows(lapply(smsmoeas, getminP),lapply(nsgas, getminP))
m=lapply(moeads, as.data.frame)
m=bind_rows(lapply(m, getminP))
colnames(m) = colnames(minmoeas)
rownames(m) <- NULL
minmoeas = rbind(minmoeas, m)
minp = getminP(minmoeas)
maxmoeas = bind_rows(lapply(smsmoeas, getmaxP),lapply(nsgas, getmaxP))
m=lapply(moeads, as.data.frame)
m=bind_rows(lapply(m, getmaxP))
colnames(m) = colnames(maxmoeas)
rownames(m) <- NULL
maxmoeas = rbind(maxmoeas, m)
maxp = getmaxP(maxmoeas)
MinP <- matrix(rep(minp, times = nrow(head(nsgas[[1]]))),
nrow  = nrow(head(nsgas[[1]])),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(head(nsgas[[1]]))),
nrow  = nrow(head(nsgas[[1]])),
byrow = TRUE)
snsga = lapply(nsgas, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
# Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
Y    <- round((Y - MinP)/ (MaxP - MinP),2)
return (Y)
})
ssmsmoea = lapply(smsmoeas, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
# Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
Y    <- round((Y - MinP)/ (MaxP - MinP),2)
return (Y)
})
smoead = lapply(moeads, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
return (Y)
})
m_nsgaHV = mean(unlist(lapply(snsga, eaf::hypervolume, c(1,1))))
m_smsHV = mean(unlist(lapply(smoead, eaf::hypervolume, c(1,1))))
m_moeadsHV = mean(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1,1))))
metrics=cbind(metrics, data.frame(m_nsgaHV, m_smsHV,m_moeadsHV))
sd_nsgaHV = sd(unlist(lapply(snsga, eaf::hypervolume, c(1,1))))
metrics=cbind(data.frame(m_nsgaHV, m_smsHV,m_moeadsHV))
sd_nsgaHV = sd(unlist(lapply(snsga, eaf::hypervolume, c(1,1))))
sd_smsHV = sd(unlist(lapply(smoead, eaf::hypervolume, c(1,1))))
sd_moeadsHV = sd(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1,1))))
metrics=cbind(metrics, data.frame(sd_nsgaHV, sd_smsHV,sd_moeadsHV))
# write.table(metrics, paste0(output_folder,"/metrics.txt"), sep=",", row.names = FALSE, quote=FALSE)
print(metrics)
m
moeads
plot(moeads[[1]])
points(nsgas[[1]], col="blue")
plot(nsgas[[1]], col="blue")
plot(moeads[[1]], col="red")
points(moeads[[1]], col="red")
plot(nsgas[[1]], col="blue")
plot(nsgas[[2]], col="blue")
plot(nsgas[[3]], col="blue")
points(moeads[[1]], col="red")
points(moeads[[2]], col="red")
points(moeads[[3]], col="red")
points(smsmoeas[[1]], col="darkgreen")
points(smsmoeas[[2]], col="darkgreen")
points(smsmoeas[[3]], col="darkgreen")
m
nsgas
unlist(nsgas[[1]])
unlist(nsgas)
unlist(nsgas)
my_list <- list(
list(a = 1, b = 2),
list(a = 3, b = 4)
)
# Convert to data frame
df <- do.call(rbind, lapply(my_list, as.data.frame))
df
do.call(nsgas, lapply(nsgas, as.data.frame))
do.call(rbind, lapply(nsgas, as.data.frame))
# Convert to data frame
NSGA2 <- do.call(rbind, lapply(nsgas, as.data.frame))
MOEAD <- do.call(rbind, lapply(moeads, as.data.frame))
SMSEMOA <- do.call(rbind, lapply(smsmoeas, as.data.frame))
nondominated(NSGA2)
library(ecr)
nondominated(NSGA2)
NSGA2
as.matrix(NSGA2)
nondominated(as.matrix(NSGA2))
nondominated(t(as.matrix(NSGA2)))
NSGA2[nondominated(t(as.matrix(NSGA2))),]
domNSGA2=NSGA2[nondominated(t(as.matrix(NSGA2))),]
domMOEAD=MOEAD[nondominated(t(as.matrix(MOEAD))),]
domSMSEMOA=SMSEMOA[nondominated(t(as.matrix(SMSEMOA))),]
dim(SMSEMOA)
dim(domSMSEMOA)
plot(domNSGA2)
points(domMOEAD, col='darkred')
points(domMOEAD, col='red')
points(domSMSEMOA, col='red')
points(domSMSEMOA, col='blue')
RES_moead <- moead(preset = preset_moead("moead.de"),
problem = problem,
decomp = decomp, aggfun = aggfun, variation=variation,
update = update, scaling = scaling, stopcrit = stopcrit,
showpars = showpars)
source("~/Documents/MCF/MOO_LON/Experiments/testingMOEAs.r")
moeads = c()
variation <- list(list(name = "sbx",
etax = 15, pc = 0.7),
list(name = "polymut",
etam = 15, pm = 0.2),
list(name = "truncate"))
moeads = c()
for(i in 1:nrep){
## 3: run MOEA/D
RES_moead <- moead(preset = preset_moead("moead.de"),
problem = problem,
decomp = decomp, aggfun = aggfun, variation=variation,
update = update, scaling = scaling, stopcrit = stopcrit,
showpars = showpars)
moeads[[length(moeads)+1]] = RES_moead$Archive$Y
}
# Split result into separate lists
nsgas     <- lapply(results, function(x) x$nsga)
smsmoeas  <- lapply(results, function(x) x$sms)
minmoeas = bind_rows(lapply(smsmoeas, getminP),lapply(nsgas, getminP))
m=lapply(moeads, as.data.frame)
m=bind_rows(lapply(m, getminP))
colnames(m) = colnames(minmoeas)
rownames(m) <- NULL
minmoeas = rbind(minmoeas, m)
minp = getminP(minmoeas)
maxmoeas = bind_rows(lapply(smsmoeas, getmaxP),lapply(nsgas, getmaxP))
m=lapply(moeads, as.data.frame)
m=bind_rows(lapply(m, getmaxP))
colnames(m) = colnames(maxmoeas)
rownames(m) <- NULL
maxmoeas = rbind(maxmoeas, m)
maxp = getmaxP(maxmoeas)
MinP <- matrix(rep(minp, times = nrow(head(nsgas[[1]]))),
nrow  = nrow(head(nsgas[[1]])),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(head(nsgas[[1]]))),
nrow  = nrow(head(nsgas[[1]])),
byrow = TRUE)
snsga = lapply(nsgas, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
# Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
Y    <- round((Y - MinP)/ (MaxP - MinP),2)
return (Y)
})
ssmsmoea = lapply(smsmoeas, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
# Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
Y    <- round((Y - MinP)/ (MaxP - MinP),2)
return (Y)
})
smoead = lapply(moeads, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
return (Y)
})
m_nsgaHV = mean(unlist(lapply(snsga, eaf::hypervolume, c(1,1))))
m_smsHV = mean(unlist(lapply(smoead, eaf::hypervolume, c(1,1))))
m_moeadsHV = mean(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1,1))))
metrics=cbind(data.frame(m_nsgaHV, m_smsHV,m_moeadsHV))
sd_nsgaHV = sd(unlist(lapply(snsga, eaf::hypervolume, c(1,1))))
sd_smsHV = sd(unlist(lapply(smoead, eaf::hypervolume, c(1,1))))
sd_moeadsHV = sd(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1,1))))
metrics=cbind(metrics, data.frame(sd_nsgaHV, sd_smsHV,sd_moeadsHV))
# write.table(metrics, paste0(output_folder,"/metrics.txt"), sep=",", row.names = FALSE, quote=FALSE)
print(metrics)
my_list <- list(
list(a = 1, b = 2),
list(a = 3, b = 4)
)
# Convert to data frame
NSGA2 <- do.call(rbind, lapply(nsgas, as.data.frame))
MOEAD <- do.call(rbind, lapply(moeads, as.data.frame))
SMSEMOA <- do.call(rbind, lapply(smsmoeas, as.data.frame))
domNSGA2=NSGA2[nondominated(t(as.matrix(NSGA2))),]
domMOEAD=MOEAD[nondominated(t(as.matrix(MOEAD))),]
domSMSEMOA=SMSEMOA[nondominated(t(as.matrix(SMSEMOA))),]
plot(domNSGA2)
points(domMOEAD, col='red')
points(domSMSEMOA, col='blue')
Y[,1:2]
Y = rbind(data.frame(domNSGA2,"nsga2"),
data.frame(domMOEAD,"MOEAD"),
data.frame(domSMSEMOA,"SMSEMOA")
)
data.frame(domNSGA2,"nsga2")
data.frame(domMOEAD,"MOEAD"),
data.frame(domMOEAD,"MOEAD")
colnames(domMOEAD) = colnames(domSMSEMOA)
Y = rbind(data.frame(domNSGA2,"nsga2"),
data.frame(domMOEAD,"MOEAD"),
data.frame(domSMSEMOA,"SMSEMOA")
)
head(data.frame(domNSGA2,"nsga2"))
Y = rbind(data.frame(domNSGA2,algo="nsga2"),
data.frame(domMOEAD,algo="MOEAD"),
data.frame(domSMSEMOA,algo="SMSEMOA")
)
Y = Y[ondominated(t(as.matrix(Y[,1:2]))),]
Y = Y[nondominated(t(as.matrix(Y[,1:2]))),]
plot(Y[which(Y$algo=='nsga2'),])
Y[which(Y$algo=='nsga2'),]
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
points(Y[which(Y$algo=='SMSEMOA'),1:2], col='blue')
source("~/Documents/MCF/MOO_LON/Experiments/testingMOEAs.r")
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
points(Y[which(Y$algo=='SMSEMOA'),1:2], col='blue')
plot(Y[which(Y$algo=='MOEAD'),1:2], col='red')
source("~/Documents/MCF/MOO_LON/Experiments/testingMOEAs.r")
i
# Split result into separate lists
nsgas     <- lapply(results, function(x) x$nsga)
smsmoeas  <- lapply(results, function(x) x$sms)
minmoeas = bind_rows(lapply(smsmoeas, getminP),lapply(nsgas, getminP))
m=lapply(moeads, as.data.frame)
m=bind_rows(lapply(m, getminP))
colnames(m) = colnames(minmoeas)
rownames(m) <- NULL
minmoeas = rbind(minmoeas, m)
minp = getminP(minmoeas)
maxmoeas = bind_rows(lapply(smsmoeas, getmaxP),lapply(nsgas, getmaxP))
m=lapply(moeads, as.data.frame)
m=bind_rows(lapply(m, getmaxP))
colnames(m) = colnames(maxmoeas)
rownames(m) <- NULL
maxmoeas = rbind(maxmoeas, m)
maxp = getmaxP(maxmoeas)
MinP <- matrix(rep(minp, times = nrow(head(nsgas[[1]]))),
nrow  = nrow(head(nsgas[[1]])),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(head(nsgas[[1]]))),
nrow  = nrow(head(nsgas[[1]])),
byrow = TRUE)
snsga = lapply(nsgas, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
# Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
Y    <- round((Y - MinP)/ (MaxP - MinP),2)
return (Y)
})
ssmsmoea = lapply(smsmoeas, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
# Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
Y    <- round((Y - MinP)/ (MaxP - MinP),2)
return (Y)
})
smoead = lapply(moeads, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
return (Y)
})
m_nsgaHV = mean(unlist(lapply(snsga, eaf::hypervolume, c(1,1))))
m_smsHV = mean(unlist(lapply(smoead, eaf::hypervolume, c(1,1))))
m_moeadsHV = mean(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1,1))))
metrics=cbind(data.frame(m_nsgaHV, m_smsHV,m_moeadsHV))
sd_nsgaHV = sd(unlist(lapply(snsga, eaf::hypervolume, c(1,1))))
sd_smsHV = sd(unlist(lapply(smoead, eaf::hypervolume, c(1,1))))
sd_moeadsHV = sd(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1,1))))
metrics=cbind(metrics, data.frame(sd_nsgaHV, sd_smsHV,sd_moeadsHV))
# write.table(metrics, paste0(output_folder,"/metrics.txt"), sep=",", row.names = FALSE, quote=FALSE)
print(metrics)
my_list <- list(
list(a = 1, b = 2),
list(a = 3, b = 4)
)
# Convert to data frame
NSGA2 <- do.call(rbind, lapply(nsgas, as.data.frame))
MOEAD <- do.call(rbind, lapply(moeads, as.data.frame))
SMSEMOA <- do.call(rbind, lapply(smsmoeas, as.data.frame))
domNSGA2=NSGA2[nondominated(t(as.matrix(NSGA2))),]
domMOEAD=MOEAD[nondominated(t(as.matrix(MOEAD))),]
domSMSEMOA=SMSEMOA[nondominated(t(as.matrix(SMSEMOA))),]
colnames(domMOEAD) = colnames(domSMSEMOA)
Y = rbind(data.frame(domNSGA2,algo="nsga2"),
data.frame(domMOEAD,algo="MOEAD"),
data.frame(domSMSEMOA,algo="SMSEMOA")
)
Y = Y[nondominated(t(as.matrix(Y[,1:2]))),]
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
points(Y[which(Y$algo=='SMSEMOA'),1:2], col='blue')
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='SMSEMOA'),1:2], col='blue')
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
# write.table(metrics, paste0(output_folder,"/metrics.txt"), sep=",", row.names = FALSE, quote=FALSE)
print(metrics)
smoead
plot(smoead)
plot(smoead[,1],smoead[,2])
# write.table(metrics, paste0(output_folder,"/metrics.txt"), sep=",", row.names = FALSE, quote=FALSE)
print(metrics)
sd_nsgaHV = sd(unlist(lapply(snsga, eaf::hypervolume, c(1.1,1.1))))
m_nsgaHV = mean(unlist(lapply(snsga, eaf::hypervolume, c(1.1,1.1))))
m_smsHV = mean(unlist(lapply(smoead, eaf::hypervolume, c(1.1,1.1))))
m_moeadsHV = mean(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1.1,1.1))))
metrics=cbind(data.frame(m_nsgaHV, m_smsHV,m_moeadsHV))
sd_nsgaHV = sd(unlist(lapply(snsga, eaf::hypervolume, c(1.1,1.1))))
sd_smsHV = sd(unlist(lapply(smoead, eaf::hypervolume, c(1.1,1.1))))
sd_moeadsHV = sd(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1.1,1.1))))
metrics=cbind(metrics, data.frame(sd_nsgaHV, sd_smsHV,sd_moeadsHV))
# write.table(metrics, paste0(output_folder,"/metrics.txt"), sep=",", row.names = FALSE, quote=FALSE)
print(metrics)
MinP
MaxP
smoead
smoead
getminP(smoead)
lapply(smoead, getminP)
lapply(smoead, getmaxP)
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
points(Y[which(Y$algo=='SMSEMOA'),1:2], col='blue')
source("~/Documents/MCF/MOO_LON/Experiments/testingMOEAs.r")
source("~/Documents/MCF/MOO_LON/Experiments/testingMOEAs.r")
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
points(Y[which(Y$algo=='SMSEMOA'),1:2], col='blue')
source("~/Documents/MCF/MOO_LON/Experiments/testingMOEAs.r")
source("~/Documents/MCF/MOO_LON/Experiments/testingMOEAs.r")
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
moeads = c()
for(i in 1:nrep){
## 3: run MOEA/D
RES_moead <- moead(preset = preset_moead("moead.de"),
problem = problem,
decomp = decomp, aggfun = aggfun,
variation=variation,
update = update, scaling = scaling, stopcrit = stopcrit,
showpars = showpars)
moeads[[length(moeads)+1]] = RES_moead$Archive$Y
}
aggfun    <- list(name       = "awt")
update    <- list(name       = "standard",
UseArchive = TRUE)
moeads
moeads = c()
for(i in 1:nrep){
## 3: run MOEA/D
RES_moead <- moead(preset = preset_moead("moead.de"),
problem = problem,
decomp = decomp, aggfun = aggfun,
# variation=variation,
update = update, scaling = scaling, stopcrit = stopcrit,
showpars = showpars)
moeads[[length(moeads)+1]] = RES_moead$Archive$Y
}
moeads
moeads = c()
for(i in 1:nrep){
## 3: run MOEA/D
RES_moead <- moead(preset = preset_moead("moead.de"),
problem = problem,
decomp = decomp, aggfun = aggfun,
# variation=variation,
update = update, scaling = scaling, stopcrit = stopcrit,
showpars = showpars)
moeads[[length(moeads)+1]] = RES_moead$Archive$Y
}
# Split result into separate lists
nsgas     <- lapply(results, function(x) x$nsga)
smsmoeas  <- lapply(results, function(x) x$sms)
minmoeas = bind_rows(lapply(smsmoeas, getminP),lapply(nsgas, getminP))
m=lapply(moeads, as.data.frame)
m=bind_rows(lapply(m, getminP))
colnames(m) = colnames(minmoeas)
rownames(m) <- NULL
minmoeas = rbind(minmoeas, m)
minp = getminP(minmoeas)
maxmoeas = bind_rows(lapply(smsmoeas, getmaxP),lapply(nsgas, getmaxP))
m=lapply(moeads, as.data.frame)
m=bind_rows(lapply(m, getmaxP))
colnames(m) = colnames(maxmoeas)
rownames(m) <- NULL
maxmoeas = rbind(maxmoeas, m)
maxp = getmaxP(maxmoeas)
MinP <- matrix(rep(minp, times = nrow(head(nsgas[[1]]))),
nrow  = nrow(head(nsgas[[1]])),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(head(nsgas[[1]]))),
nrow  = nrow(head(nsgas[[1]])),
byrow = TRUE)
snsga = lapply(nsgas, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
# Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
Y    <- round((Y - MinP)/ (MaxP - MinP),2)
return (Y)
})
ssmsmoea = lapply(smsmoeas, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
# Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
Y    <- round((Y - MinP)/ (MaxP - MinP),2)
return (Y)
})
smoead = lapply(moeads, function(Y) {
MinP <- matrix(rep(minp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
MaxP <- matrix(rep(maxp, times = nrow(Y)),
nrow  = nrow(Y),
byrow = TRUE)
# Perform linear scaling
Y    <- (Y - MinP) / (MaxP - MinP + 1e-16)
return (Y)
})
m_nsgaHV = mean(unlist(lapply(snsga, eaf::hypervolume, c(1.1,1.1))))
m_smsHV = mean(unlist(lapply(smoead, eaf::hypervolume, c(1.1,1.1))))
m_moeadsHV = mean(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1.1,1.1))))
metrics=cbind(data.frame(m_nsgaHV, m_smsHV,m_moeadsHV))
sd_nsgaHV = sd(unlist(lapply(snsga, eaf::hypervolume, c(1.1,1.1))))
sd_smsHV = sd(unlist(lapply(smoead, eaf::hypervolume, c(1.1,1.1))))
sd_moeadsHV = sd(unlist(lapply(ssmsmoea, eaf::hypervolume, c(1.1,1.1))))
metrics=cbind(metrics, data.frame(sd_nsgaHV, sd_smsHV,sd_moeadsHV))
# write.table(metrics, paste0(output_folder,"/metrics.txt"), sep=",", row.names = FALSE, quote=FALSE)
print(metrics)
# Convert to data frame
NSGA2 <- do.call(rbind, lapply(nsgas, as.data.frame))
MOEAD <- do.call(rbind, lapply(moeads, as.data.frame))
SMSEMOA <- do.call(rbind, lapply(smsmoeas, as.data.frame))
domNSGA2=NSGA2[nondominated(t(as.matrix(NSGA2))),]
domMOEAD=MOEAD[nondominated(t(as.matrix(MOEAD))),]
domSMSEMOA=SMSEMOA[nondominated(t(as.matrix(SMSEMOA))),]
colnames(domMOEAD) = colnames(domSMSEMOA)
Y = rbind(data.frame(domNSGA2,algo="nsga2"),
data.frame(domMOEAD,algo="MOEAD"),
data.frame(domSMSEMOA,algo="SMSEMOA")
)
Y = Y[nondominated(t(as.matrix(Y[,1:2]))),]
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
points(Y[which(Y$algo=='SMSEMOA'),1:2], col='blue')
plot(Y[which(Y$algo=='nsga2'),1:2])
points(Y[which(Y$algo=='MOEAD'),1:2], col='red')
points(Y[which(Y$algo=='SMSEMOA'),1:2], col='blue')
4. *Yuri Lavinas*, Camilo De La Torre, Kévin Cortacero, Dennis G. Wilson and Sylvain Cussat-Blanc **Interpretable Genetic Programming Models for Real-World Biomedical Images** Genetic Programming Theory and Practice XXI. Genetic and Evolutionary Computation. https://doi.org/10.1007/978-981-96-0077-9_15 For the preprint, send me an email.
source("~/Documents/MCF/yurilavinas.github.io/exec.R")
